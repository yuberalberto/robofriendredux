{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","_ref","id","name","email","username","firstname","split","react_default","a","createElement","className","alt","src","concat","style","padding","display","flexDirection","CardList","robots","map","user","components_Card","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","overflowY","border","height","children","ErrorBoundry","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","hasError","error","info","setState","Component","App","onRequestRobots","_this$props","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","components_SearchBox","components_Scroll","components_ErrorBoundry","components_CardList","React","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","arguments","length","undefined","action","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","es","src_containers_App","document","getElementById","URL","process","href","origin","addEventListener","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.18a3910b.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n// export const Card = ({ id, name, email}) =>{\r\nconst Card = ({ id, name, username, email}) =>{\r\n    let firstname=name.split(\" \");\r\n    \r\n    return (\r\n        <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n            <img alt={firstname[0]} src={`https://robohash.org/${id}?size=200x200`} />\r\n            <div id='div2' style={{padding:10, display:'flex', flexDirection:'column'}} className='w5 h4'>\r\n                <h2 className='f5 adjustxt'>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Card;","import React from 'react'\r\nimport Card from './Card'\r\n\r\nconst CardList = ({robots}) =>{\r\n  if(false){\r\n    throw new Error('NOOOOOOOO!')\r\n  }\r\n  return(\r\n    <div>\r\n      {\r\n        robots.map(user => {\r\n          return (\r\n            <Card \r\n              key={user.id} \r\n              id={user.id}\r\n              name={user.name} \r\n              username={user.username} \r\n              email={user.email}\r\n            />\r\n          );\r\n        })\r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CardList;","import React from 'react'\r\n\r\nconst SearchBox = ({searchfield, searchChange}) =>{\r\n  return (\r\n    <div>\r\n      <input \r\n        className='pa3 ma2 ba b--green bg-lightest-blue' \r\n        type='search' \r\n        placeholder='search robots'\r\n        onChange = {searchChange}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) =>{\r\n  return (\r\n    <div style={{ overflowY:'scroll', border: '1px solid black', height:'500px'}}>\r\n      {props.children}\r\n    </div>\r\n   );\r\n};\r\n\r\nexport default Scroll;","import React, {Component} from 'react';\r\n\r\n\r\nclass ErrorBoundry extends Component{\r\n  constructor(props){\r\n    super(props);\r\n    this.state={\r\n      hasError: false\r\n    }\r\n  }\r\n\r\n  componentDidCatch(error, info){\r\n    this.setState({ hasError: true });\r\n  }\r\n\r\n  render(){\r\n    if (this.state.hasError){\r\n      return <h1>Oooops. That is not good</h1>\r\n    }\r\n    return this.props.children;\r\n  }\r\n}\r\n\r\nexport default ErrorBoundry;","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport './App.css';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundry from '../components/ErrorBoundry';\r\nimport { setSearchField, requestRobots } from '../actions'\r\n\r\nconst mpaStateToProps = state =>{\r\n  return {\r\n    searchField: state.searchRobots.searchField,\r\n    robots: state.requestRobots.robots,\r\n    isPending: state.requestRobots.isPending,\r\n    error: state.requestRobots.error\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n    onRequestRobots: () => dispatch(requestRobots())\r\n  }\r\n}\r\n\r\nclass App extends React.Component{ //Could use destructuring in React.Component\r\n\r\n  componentDidMount(){\r\n    this.props.onRequestRobots()\r\n  }\r\n\r\n  render(){\r\n    const { searchField, onSearchChange, robots, isPending } = this.props;\r\n    const filteredRobots = robots.filter(robot =>{\r\n      return robot.name.toLowerCase().includes(searchField.toLowerCase())\r\n    });\r\n    return isPending ?\r\n    <h1>Loading...</h1>:(\r\n      <div  className='tc'>\r\n        <h1 className='f1'>RoboFriends</h1>\r\n        <SearchBox searchChange={onSearchChange}/>\r\n        <Scroll>\r\n          <ErrorBoundry>\r\n            <CardList robots={filteredRobots}/>\r\n          </ErrorBoundry>\r\n        </Scroll>\r\n    </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(mpaStateToProps, mapDispatchToProps)(App);","import {\r\n  CHANGE_SEARCH_FIELD,\r\n  REQUEST_ROBOTS_PENDING,\r\n  REQUEST_ROBOTS_SUCCESS,\r\n  REQUEST_ROBOTS_FAILED\r\n  } from './constants.js';\r\n\r\nexport const setSearchField = (text)=> ({\r\n  type: CHANGE_SEARCH_FIELD,\r\n  payload: text\r\n})\r\n\r\nexport const requestRobots = () => (dispatch) =>{\r\n  dispatch({ type: REQUEST_ROBOTS_PENDING} )\r\n  fetch('https://jsonplaceholder.typicode.com/users')\r\n  .then(response => response.json())\r\n  .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\r\n  .catch(error => dispatch({type: REQUEST_ROBOTS_FAILED, payload: error }))\r\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\r\n  CHANGE_SEARCH_FIELD,\r\n  REQUEST_ROBOTS_PENDING,\r\n  REQUEST_ROBOTS_SUCCESS,\r\n  REQUEST_ROBOTS_FAILED\r\n  } from './constants.js';\r\n\r\n\r\n//Object \"Initial state\" of the search\r\nconst initialStateSearch = {\r\n  searchField:''\r\n}\r\n\r\nexport const searchRobots = (state=initialStateSearch, action={})=>{\r\n  switch(action.type) {\r\n    case CHANGE_SEARCH_FIELD:\r\n      return Object.assign({}, state, {searchField: action.payload});\r\n    default:\r\n      return state;\r\n  }\r\n  \r\n}\r\n\r\n//Object \"Initial state\" of fetching the robots.\r\nconst initialStateRobots = {\r\n  isPending: false,\r\n  robots: [],\r\n  error:''\r\n}\r\n\r\nexport const requestRobots = (state=initialStateRobots, action={}) =>{\r\n  switch(action.type) {\r\n    case REQUEST_ROBOTS_PENDING:\r\n      return Object.assign({}, state, {isPending: true});\r\n    case REQUEST_ROBOTS_SUCCESS:\r\n      return Object.assign({}, state, {robots: action.payload, isPending: false });\r\n    case REQUEST_ROBOTS_FAILED:\r\n      return Object.assign({}, state, {error: action.payload, isPending: false});\r\n    default:\r\n      return state;\r\n  }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport { searchRobots, requestRobots } from './reducers';\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({ searchRobots, requestRobots});\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\n\nReactDOM.render(\n  <Provider store={store}>\n    <App/>\n  </Provider>, \n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}